; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	F:\gh\des\des_test.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@EKHDKDLM@5B365F2FB2CD7F32?$AA@	; `string'
PUBLIC	??_C@_0BB@HAFAJAKC@EA024714AD5C4D84?$AA@	; `string'
PUBLIC	??_C@_0BB@IGLALCMM@0011223344556677?$AA@	; `string'
PUBLIC	??_C@_0BB@BLCFOGO@95A8D72813DAA94D?$AA@		; `string'
PUBLIC	??_C@_0BB@EGPPNACH@11DE2BCE0CB1765A?$AA@	; `string'
PUBLIC	??_C@_0BB@HMLJOOHO@B10F843097A0F932?$AA@	; `string'
PUBLIC	??_C@_0BB@CDMOICBL@41AD068548809D02?$AA@	; `string'
PUBLIC	??_C@_0BB@GHIALFFI@0000000000000000?$AA@	; `string'
PUBLIC	??_C@_0BB@KOLEBLOC@9292929292929292?$AA@	; `string'
PUBLIC	??_C@_0BB@HFMKLLDK@A6A6A6A6A6A6A6A6?$AA@	; `string'
PUBLIC	??_C@_0BB@KCIPHDGB@2BD6459F82C5B300?$AA@	; `string'
PUBLIC	??_C@_0BB@EDCOCHOA@0001020304050607?$AA@	; `string'
PUBLIC	??_C@_0BB@IBJAPKMG@8000000000000000?$AA@	; `string'
PUBLIC	_test_keys
PUBLIC	_test_pt
PUBLIC	_test_ct
_BSS	SEGMENT
?start@?1??progress@@9@9 DD 01H DUP (?)			; `progress'::`2'::start
_BSS	ENDS
;	COMDAT ??_C@_0BB@EKHDKDLM@5B365F2FB2CD7F32?$AA@
CONST	SEGMENT
??_C@_0BB@EKHDKDLM@5B365F2FB2CD7F32?$AA@ DB '5B365F2FB2CD7F32', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HAFAJAKC@EA024714AD5C4D84?$AA@
CONST	SEGMENT
??_C@_0BB@HAFAJAKC@EA024714AD5C4D84?$AA@ DB 'EA024714AD5C4D84', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGLALCMM@0011223344556677?$AA@
CONST	SEGMENT
??_C@_0BB@IGLALCMM@0011223344556677?$AA@ DB '0011223344556677', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLCFOGO@95A8D72813DAA94D?$AA@
CONST	SEGMENT
??_C@_0BB@BLCFOGO@95A8D72813DAA94D?$AA@ DB '95A8D72813DAA94D', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EGPPNACH@11DE2BCE0CB1765A?$AA@
CONST	SEGMENT
??_C@_0BB@EGPPNACH@11DE2BCE0CB1765A?$AA@ DB '11DE2BCE0CB1765A', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HMLJOOHO@B10F843097A0F932?$AA@
CONST	SEGMENT
??_C@_0BB@HMLJOOHO@B10F843097A0F932?$AA@ DB 'B10F843097A0F932', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CDMOICBL@41AD068548809D02?$AA@
CONST	SEGMENT
??_C@_0BB@CDMOICBL@41AD068548809D02?$AA@ DB '41AD068548809D02', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GHIALFFI@0000000000000000?$AA@
CONST	SEGMENT
??_C@_0BB@GHIALFFI@0000000000000000?$AA@ DB '0000000000000000', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_test_keys DD	FLAT:??_C@_0BB@IBJAPKMG@8000000000000000?$AA@
	DD	FLAT:??_C@_0BB@EDCOCHOA@0001020304050607?$AA@
	DD	FLAT:??_C@_0BB@KCIPHDGB@2BD6459F82C5B300?$AA@
	DD	FLAT:??_C@_0BB@HFMKLLDK@A6A6A6A6A6A6A6A6?$AA@
	DD	FLAT:??_C@_0BB@KOLEBLOC@9292929292929292?$AA@
_test_pt DD	FLAT:??_C@_0BB@GHIALFFI@0000000000000000?$AA@
	DD	FLAT:??_C@_0BB@CDMOICBL@41AD068548809D02?$AA@
	DD	FLAT:??_C@_0BB@HMLJOOHO@B10F843097A0F932?$AA@
	DD	FLAT:??_C@_0BB@EGPPNACH@11DE2BCE0CB1765A?$AA@
	DD	FLAT:??_C@_0BB@KOLEBLOC@9292929292929292?$AA@
_test_ct DD	FLAT:??_C@_0BB@BLCFOGO@95A8D72813DAA94D?$AA@
	DD	FLAT:??_C@_0BB@IGLALCMM@0011223344556677?$AA@
	DD	FLAT:??_C@_0BB@HAFAJAKC@EA024714AD5C4D84?$AA@
	DD	FLAT:??_C@_0BB@HFMKLLDK@A6A6A6A6A6A6A6A6?$AA@
	DD	FLAT:??_C@_0BB@EKHDKDLM@5B365F2FB2CD7F32?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0BB@KOLEBLOC@9292929292929292?$AA@
CONST	SEGMENT
??_C@_0BB@KOLEBLOC@9292929292929292?$AA@ DB '9292929292929292', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HFMKLLDK@A6A6A6A6A6A6A6A6?$AA@
CONST	SEGMENT
??_C@_0BB@HFMKLLDK@A6A6A6A6A6A6A6A6?$AA@ DB 'A6A6A6A6A6A6A6A6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KCIPHDGB@2BD6459F82C5B300?$AA@
CONST	SEGMENT
??_C@_0BB@KCIPHDGB@2BD6459F82C5B300?$AA@ DB '2BD6459F82C5B300', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDCOCHOA@0001020304050607?$AA@
CONST	SEGMENT
??_C@_0BB@EDCOCHOA@0001020304050607?$AA@ DB '0001020304050607', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IBJAPKMG@8000000000000000?$AA@
CONST	SEGMENT
??_C@_0BB@IBJAPKMG@8000000000000000?$AA@ DB '8000000000000000', 00H ; `string'
CONST	ENDS
EXTRN	__stat64i32:PROC
; Function compile flags: /Ogspy
;	COMDAT _stat
_TEXT	SEGMENT
__Filename$ = 8						; size = 4
__Stat$ = 12						; size = 4
_stat	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sys\stat.inl
; Line 59
	jmp	__stat64i32
_stat	ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogspy
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 133
	jmp	__time64
_time	ENDP
_TEXT	ENDS
PUBLIC	??_C@_08IFGHPOIE@KGS?$CB?$EA?$CD$?$CF?$AA@	; `string'
PUBLIC	_lanman
EXTRN	_des_encx:PROC
EXTRN	_des_setkeyx:PROC
EXTRN	_des_str2keyx:PROC
EXTRN	_toupper:PROC
;	COMDAT ??_C@_08IFGHPOIE@KGS?$CB?$EA?$CD$?$CF?$AA@
; File f:\gh\des\des_test.c
CONST	SEGMENT
??_C@_08IFGHPOIE@KGS?$CB?$EA?$CD$?$CF?$AA@ DB 'KGS!@#$%', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _lanman
_TEXT	SEGMENT
_ctx$ = -76						; size = 136
_lmpwd$ = 60						; size = 32
_key1$ = 92						; size = 8
_key2$ = 100						; size = 8
_len$ = 108						; size = 4
_lmhash$ = 120						; size = 4
_pwd$ = 124						; size = 4
_lanman	PROC						; COMDAT
; Line 62
	push	ebp
	lea	ebp, DWORD PTR [esp-112]
; Line 66
	mov	eax, DWORD PTR _pwd$[ebp]
	sub	esp, 188				; 000000bcH
	lea	edx, DWORD PTR [eax+1]
$LL12@lanman:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL12@lanman
	push	ebx
	sub	eax, edx
	push	esi
	push	edi
; Line 69
	mov	edi, DWORD PTR _lmhash$[ebp]
	mov	DWORD PTR _len$[ebp], eax
	xor	eax, eax
	stosd
	stosd
; Line 72
	push	14					; 0000000eH
	stosd
	pop	ebx
	stosd
	cmp	DWORD PTR _len$[ebp], ebx
	jbe	SHORT $LN6@lanman
	mov	DWORD PTR _len$[ebp], ebx
$LN6@lanman:
; Line 74
	mov	edi, DWORD PTR _pwd$[ebp]
	lea	eax, DWORD PTR _lmpwd$[ebp]
	xor	esi, esi
	sub	edi, eax
$LL13@lanman:
; Line 75
	cmp	esi, DWORD PTR _len$[ebp]
	jae	SHORT $LN8@lanman
	lea	eax, DWORD PTR [edi+esi]
	movzx	eax, BYTE PTR _lmpwd$[ebp+eax]
	push	eax
	call	_toupper
	pop	ecx
	jmp	SHORT $LN9@lanman
$LN8@lanman:
	xor	eax, eax
$LN9@lanman:
	mov	BYTE PTR _lmpwd$[ebp+esi], al
	inc	esi
	dec	ebx
	jne	SHORT $LL13@lanman
; Line 78
	lea	eax, DWORD PTR _key1$[ebp]
	push	eax
	lea	eax, DWORD PTR _lmpwd$[ebp]
	push	eax
	call	_des_str2keyx
; Line 79
	lea	eax, DWORD PTR _key2$[ebp]
	push	eax
	lea	eax, DWORD PTR _lmpwd$[ebp+7]
	push	eax
	call	_des_str2keyx
; Line 81
	lea	eax, DWORD PTR _key1$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_setkeyx
; Line 82
	mov	edi, DWORD PTR _lmhash$[ebp]
	push	ebx
	push	edi
	mov	esi, OFFSET ??_C@_08IFGHPOIE@KGS?$CB?$EA?$CD$?$CF?$AA@
	lea	eax, DWORD PTR _ctx$[ebp]
	push	esi
	push	eax
	call	_des_encx
; Line 84
	lea	eax, DWORD PTR _key2$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_setkeyx
; Line 85
	push	ebx
	add	edi, 8
	push	edi
	lea	eax, DWORD PTR _ctx$[ebp]
	push	esi
	push	eax
	call	_des_encx
	add	esp, 64					; 00000040H
	pop	edi
	pop	esi
	pop	ebx
; Line 86
	add	ebp, 112				; 00000070H
	leave
	ret	0
_lanman	ENDP
_TEXT	ENDS
PUBLIC	??_C@_03IJFOLNOP@?$CF2x?$AA@			; `string'
PUBLIC	_hex2bin
EXTRN	_sscanf:PROC
EXTRN	_isxdigit:PROC
;	COMDAT ??_C@_03IJFOLNOP@?$CF2x?$AA@
CONST	SEGMENT
??_C@_03IJFOLNOP@?$CF2x?$AA@ DB '%2x', 00H		; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _hex2bin
_TEXT	SEGMENT
_x$ = -4						; size = 4
_bin$ = 8						; size = 4
_hex$ = 12						; size = 4
_hex2bin PROC						; COMDAT
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	edi
; Line 93
	mov	edi, DWORD PTR _hex$[ebp]
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
$LL16@hex2bin:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL16@hex2bin
	sub	eax, edx
	mov	ebx, eax
; Line 95
	test	bl, 1
	je	SHORT $LN8@hex2bin
; Line 96
	xor	eax, eax
	jmp	SHORT $LN9@hex2bin
$LN8@hex2bin:
	push	esi
; Line 99
	xor	esi, esi
	test	ebx, ebx
	je	SHORT $LN5@hex2bin
$LL7@hex2bin:
; Line 100
	movsx	eax, BYTE PTR [esi+edi]
	push	eax
	call	_isxdigit
	pop	ecx
	test	eax, eax
	je	SHORT $LN13@hex2bin
; Line 99
	inc	esi
	cmp	esi, ebx
	jb	SHORT $LL7@hex2bin
$LN5@hex2bin:
; Line 105
	xor	esi, esi
	shr	ebx, 1
	je	SHORT $LN1@hex2bin
$LL3@hex2bin:
; Line 106
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_03IJFOLNOP@?$CF2x?$AA@
	push	edi
	call	_sscanf
; Line 107
	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _bin$[ebp]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+ecx], al
	inc	esi
	add	edi, 2
	cmp	esi, ebx
	jb	SHORT $LL3@hex2bin
$LN1@hex2bin:
; Line 109
	mov	eax, ebx
$LN17@hex2bin:
	pop	esi
$LN9@hex2bin:
	pop	edi
	pop	ebx
; Line 110
	leave
	ret	0
$LN13@hex2bin:
; Line 101
	xor	eax, eax
	jmp	SHORT $LN17@hex2bin
_hex2bin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EE@IKLPBLCB@?6Failed?5test?5?$CD?$CFi?5?3?5Got?5?$CF08X?5?$CF08X@ ; `string'
PUBLIC	??_C@_0DB@GDPCJFKD@?6Passed?5Encryption?1Decryption?5te@ ; `string'
PUBLIC	_run_tests
EXTRN	_printf:PROC
;	COMDAT ??_C@_0EE@IKLPBLCB@?6Failed?5test?5?$CD?$CFi?5?3?5Got?5?$CF08X?5?$CF08X@
CONST	SEGMENT
??_C@_0EE@IKLPBLCB@?6Failed?5test?5?$CD?$CFi?5?3?5Got?5?$CF08X?5?$CF08X@ DB 0aH
	DB	'Failed test #%i : Got %08X %08X instead of %08X %08X for %08X'
	DB	' %08X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GDPCJFKD@?6Passed?5Encryption?1Decryption?5te@
CONST	SEGMENT
??_C@_0DB@GDPCJFKD@?6Passed?5Encryption?1Decryption?5te@ DB 0aH, 'Passed '
	DB	'Encryption/Decryption test #%i %08X %08X', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _run_tests
_TEXT	SEGMENT
_ctx$ = -68						; size = 136
_key$ = 68						; size = 8
_pt2$ = 76						; size = 8
_ct1$ = 84						; size = 8
_ct2$ = 92						; size = 8
_pt1$ = 100						; size = 8
tv244 = 108						; size = 4
_fails$ = 112						; size = 4
tv187 = 116						; size = 4
_run_tests PROC						; COMDAT
; Line 113
	push	ebp
	lea	ebp, DWORD PTR [esp-120]
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
; Line 114
	xor	ebx, ebx
	push	edi
	mov	DWORD PTR _fails$[ebp], ebx
	mov	DWORD PTR tv187[ebp], 1
	mov	DWORD PTR tv244[ebp], 5
$LL11@run_tests:
; Line 121
	push	DWORD PTR _test_keys[ebx]
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_hex2bin
; Line 122
	push	DWORD PTR _test_ct[ebx]
	lea	eax, DWORD PTR _ct1$[ebp]
	push	eax
	call	_hex2bin
; Line 123
	push	DWORD PTR _test_pt[ebx]
	mov	esi, eax
	lea	eax, DWORD PTR _pt1$[ebp]
	push	eax
	call	_hex2bin
; Line 126
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_setkeyx
; Line 127
	push	0
	lea	eax, DWORD PTR _ct2$[ebp]
	push	eax
	lea	eax, DWORD PTR _pt1$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_encx
; Line 128
	push	1
	lea	eax, DWORD PTR _pt2$[ebp]
	push	eax
	lea	eax, DWORD PTR _ct2$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_encx
	add	esp, 64					; 00000040H
; Line 130
	mov	ecx, esi
	lea	edi, DWORD PTR _pt2$[ebp]
	lea	esi, DWORD PTR _pt1$[ebp]
	xor	eax, eax
	repe cmpsb
	jne	SHORT $LN2@run_tests
; Line 132
	push	DWORD PTR _pt2$[ebp]
	push	DWORD PTR _pt1$[ebp]
	push	DWORD PTR tv187[ebp]
	push	OFFSET ??_C@_0DB@GDPCJFKD@?6Passed?5Encryption?1Decryption?5te@
	call	_printf
	add	esp, 16					; 00000010H
; Line 133
	jmp	SHORT $LN4@run_tests
$LN2@run_tests:
; Line 138
	push	DWORD PTR _pt1$[ebp+4]
	inc	DWORD PTR _fails$[ebp]
	push	DWORD PTR _pt1$[ebp]
	push	DWORD PTR _ct1$[ebp+4]
	push	DWORD PTR _ct1$[ebp]
	push	DWORD PTR _ct2$[ebp+4]
	push	DWORD PTR _ct2$[ebp]
	push	DWORD PTR tv187[ebp]
	push	OFFSET ??_C@_0EE@IKLPBLCB@?6Failed?5test?5?$CD?$CFi?5?3?5Got?5?$CF08X?5?$CF08X@
	call	_printf
	add	esp, 32					; 00000020H
$LN4@run_tests:
; Line 119
	add	ebx, 4
	inc	DWORD PTR tv187[ebp]
	dec	DWORD PTR tv244[ebp]
	jne	$LL11@run_tests
; Line 142
	mov	eax, DWORD PTR _fails$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 143
	add	ebp, 120				; 00000078H
	leave
	ret	0
_run_tests ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FC@HJKGCAPI@?$ANProcessed?5?$CFllu?5MB?5out?5of?5?$CFllu?5M@ ; `string'
PUBLIC	_progress
EXTRN	__aulldiv:PROC
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0FC@HJKGCAPI@?$ANProcessed?5?$CFllu?5MB?5out?5of?5?$CFllu?5M@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_0FC@HJKGCAPI@?$ANProcessed?5?$CFllu?5MB?5out?5of?5?$CFllu?5M@ DB 0dH
	DB	'Processed %llu MB out of %llu MB %lu MB/s : %llu%% complete. '
	DB	'ETA: %02d:%02d     ', 00H			; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _progress
_TEXT	SEGMENT
_pct$ = -28						; size = 8
_speed$ = -20						; size = 4
_avg$ = -16						; size = 4
_minutes$ = -16						; size = 4
_seconds$ = -12						; size = 4
$T5902 = -8						; size = 8
_total$ = -4						; size = 4
_fs_complete$ = 8					; size = 8
_fs_total$ = 16						; size = 8
_progress PROC						; COMDAT
; File f:\gh\des\des_test.c
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	edi
; Line 147
	xor	edi, edi
	mov	DWORD PTR _minutes$[ebp], edi
	mov	DWORD PTR _seconds$[ebp], edi
	mov	DWORD PTR _speed$[ebp], edi
; Line 151
	cmp	DWORD PTR ?start@?1??progress@@9@9, edi
	jne	SHORT $LN2@progress
; Line 152
	push	edi
	call	__time64
	pop	ecx
	mov	DWORD PTR ?start@?1??progress@@9@9, eax
; Line 153
	jmp	$LN3@progress
$LN2@progress:
	push	ebx
; Line 156
	mov	ebx, DWORD PTR _fs_complete$[ebp+4]
	push	esi
	mov	esi, DWORD PTR _fs_complete$[ebp]
	push	edi
	push	100					; 00000064H
	push	ebx
	push	esi
	call	__allmul
	push	DWORD PTR _fs_total$[ebp+4]
	push	DWORD PTR _fs_total$[ebp]
	push	edx
	push	eax
	call	__aulldiv
; Line 158
	push	edi
	mov	DWORD PTR _pct$[ebp], eax
	mov	DWORD PTR _pct$[ebp+4], edx
	call	__time64
	sub	eax, DWORD PTR ?start@?1??progress@@9@9
	mov	DWORD PTR $T5902[ebp+4], edx
	pop	ecx
	mov	DWORD PTR _total$[ebp], eax
; Line 160
	je	SHORT $LN9@progress
; Line 162
	mov	ecx, DWORD PTR _fs_total$[ebp]
	mov	edx, DWORD PTR _fs_total$[ebp+4]
	xor	eax, eax
	push	eax
	push	DWORD PTR _total$[ebp]
	sub	ecx, esi
	sbb	edx, ebx
	push	edx
	push	ecx
	call	__allmul
	push	ebx
	push	esi
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _avg$[ebp], eax
; Line 163
	xor	eax, eax
	push	eax
	push	DWORD PTR _total$[ebp]
	push	ebx
	push	esi
	call	__aulldiv
	mov	DWORD PTR _speed$[ebp], eax
; Line 165
	mov	eax, DWORD PTR _avg$[ebp]
	push	60					; 0000003cH
	xor	edx, edx
	pop	ecx
	div	ecx
	mov	DWORD PTR _minutes$[ebp], eax
; Line 166
	mov	DWORD PTR _seconds$[ebp], edx
$LN9@progress:
; Line 169
	mov	eax, DWORD PTR _speed$[ebp]
	xor	edx, edx
	mov	esi, 1000				; 000003e8H
	mov	ecx, esi
	div	ecx
	push	DWORD PTR _seconds$[ebp]
	xor	edx, edx
	push	DWORD PTR _minutes$[ebp]
	push	DWORD PTR _pct$[ebp+4]
	push	DWORD PTR _pct$[ebp]
	div	ecx
	push	eax
	push	edi
	push	esi
	push	DWORD PTR _fs_total$[ebp+4]
	push	DWORD PTR _fs_total$[ebp]
	call	__aulldiv
	push	edi
	push	esi
	push	edx
	push	eax
	call	__aulldiv
	push	edx
	push	eax
	push	edi
	push	esi
	push	ebx
	push	DWORD PTR _fs_complete$[ebp]
	call	__aulldiv
	push	edi
	push	esi
	push	edx
	push	eax
	call	__aulldiv
	push	edx
	push	eax
	push	OFFSET ??_C@_0FC@HJKGCAPI@?$ANProcessed?5?$CFllu?5MB?5out?5of?5?$CFllu?5M@
	call	_printf
	add	esp, 40					; 00000028H
	pop	esi
	pop	ebx
$LN3@progress:
	pop	edi
; Line 170
	leave
	ret	0
_progress ENDP
_TEXT	ENDS
PUBLIC	_DES_genkey
; Function compile flags: /Ogspy
;	COMDAT _DES_genkey
_TEXT	SEGMENT
_out$ = 8						; size = 4
_str$ = 12						; size = 4
_DES_genkey PROC					; COMDAT
; Line 175
	ret	0
_DES_genkey ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CLGEINJ@fopen?$CI?$CJ?$AA@		; `string'
PUBLIC	??_C@_08BFDNMHJA@?6undoing?$AA@			; `string'
PUBLIC	??_C@_08NMEFIIAM@?6padding?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	_DES_file
EXTRN	_perror:PROC
EXTRN	_fclose:PROC
EXTRN	_fwrite:PROC
EXTRN	_des_cbc_dec:PROC
EXTRN	_des_cbc_enc:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_07CLGEINJ@fopen?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07CLGEINJ@fopen?$CI?$CJ?$AA@ DB 'fopen()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFDNMHJA@?6undoing?$AA@
CONST	SEGMENT
??_C@_08BFDNMHJA@?6undoing?$AA@ DB 0aH, 'undoing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NMEFIIAM@?6padding?$AA@
CONST	SEGMENT
??_C@_08NMEFIIAM@?6padding?$AA@ DB 0aH, 'padding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _DES_file
_TEXT	SEGMENT
_buf_out$ = -728					; size = 320
_buf_in$ = -408						; size = 320
_st$ = -88						; size = 48
_ctx$ = -40						; size = 8
_iv$ = -32						; size = 8
_total$ = -24						; size = 4
tv197 = -20						; size = 4
_last$ = -16						; size = 4
_out$ = -12						; size = 4
_in$ = -8						; size = 4
_cmp$ = -4						; size = 4
_infile$ = 8						; size = 4
_outfile$ = 12						; size = 4
_key$ = 16						; size = 4
_crypt$ = 20						; size = 4
_DES_file PROC						; COMDAT
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
; Line 189
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	DWORD PTR _infile$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR _cmp$[ebp], ebx
	mov	DWORD PTR _last$[ebp], ebx
	call	_fopen
	pop	ecx
	pop	ecx
	mov	DWORD PTR _in$[ebp], eax
; Line 191
	cmp	eax, ebx
	je	$LN17@DES_file
; Line 193
	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	DWORD PTR _outfile$[ebp]
	call	_fopen
	pop	ecx
	pop	ecx
	mov	DWORD PTR _out$[ebp], eax
; Line 195
	cmp	eax, ebx
	je	$LN16@DES_file
; Line 197
	push	esi
	push	edi
	lea	eax, DWORD PTR _st$[ebp]
	push	eax
	push	DWORD PTR _infile$[ebp]
	call	__stat64i32
; Line 198
	mov	eax, DWORD PTR _st$[ebp+20]
	mov	DWORD PTR _total$[ebp], eax
; Line 200
	xor	eax, eax
	lea	edi, DWORD PTR _iv$[ebp]
	stosd
; Line 201
	mov	esi, 320				; 00000140H
	push	esi
	stosd
	lea	eax, DWORD PTR _buf_in$[ebp]
	push	ebx
	push	eax
	call	_memset
; Line 202
	push	esi
	lea	eax, DWORD PTR _buf_out$[ebp]
	push	ebx
	push	eax
	call	_memset
; Line 206
	push	DWORD PTR _in$[ebp]
	lea	edi, DWORD PTR [esi-64]
	push	edi
	lea	eax, DWORD PTR _buf_in$[ebp]
	push	1
	push	eax
	call	_fread
	add	esp, 48					; 00000030H
	jmp	$LN38@DES_file
$LL15@DES_file:
; Line 207
	add	DWORD PTR _cmp$[ebp], esi
; Line 208
	mov	ecx, 1000000				; 000f4240H
	cmp	DWORD PTR _cmp$[ebp], ecx
	jbe	SHORT $LN11@DES_file
	mov	eax, DWORD PTR _cmp$[ebp]
	xor	edx, edx
	div	ecx
	test	edx, edx
	je	SHORT $LN36@DES_file
$LN11@DES_file:
	mov	eax, DWORD PTR _cmp$[ebp]
	cmp	eax, DWORD PTR _total$[ebp]
	jne	SHORT $LN13@DES_file
$LN36@DES_file:
; Line 209
	push	ebx
	push	DWORD PTR _total$[ebp]
	push	ebx
	push	DWORD PTR _cmp$[ebp]
	call	_progress
	add	esp, 16					; 00000010H
$LN13@DES_file:
; Line 212
	cmp	esi, edi
	jae	SHORT $LN30@DES_file
; Line 214
	mov	DWORD PTR _last$[ebp], 1
; Line 215
	cmp	DWORD PTR _crypt$[ebp], ebx
	jne	SHORT $LN32@DES_file
; Line 217
	mov	eax, edi
	sub	eax, esi
	push	eax
	lea	eax, DWORD PTR _buf_in$[ebp+esi]
	push	ebx
	push	eax
	call	_memset
; Line 218
	mov	eax, esi
	add	esp, 12					; 0000000cH
	and	eax, 7
; Line 219
	je	SHORT $LN34@DES_file
; Line 221
	push	8
	pop	ebx
	sub	ebx, eax
; Line 223
	cmp	eax, 8
	jae	SHORT $LN34@DES_file
; Line 221
	mov	DWORD PTR tv197[ebp], ebx
$LL7@DES_file:
; Line 224
	push	OFFSET ??_C@_08NMEFIIAM@?6padding?$AA@
	call	_printf
; Line 225
	mov	BYTE PTR _buf_in$[ebp+esi], bl
	inc	esi
	dec	DWORD PTR tv197[ebp]
	pop	ecx
	jne	SHORT $LL7@DES_file
$LN30@DES_file:
; Line 230
	xor	ebx, ebx
	cmp	DWORD PTR _crypt$[ebp], ebx
	jne	SHORT $LN32@DES_file
$LN34@DES_file:
; Line 231
	lea	eax, DWORD PTR _iv$[ebp]
	push	eax
	push	esi
	lea	eax, DWORD PTR _buf_out$[ebp]
	push	eax
	lea	eax, DWORD PTR _buf_in$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_cbc_enc
	add	esp, 20					; 00000014H
; Line 232
	jmp	SHORT $LN33@DES_file
$LN32@DES_file:
; Line 233
	lea	eax, DWORD PTR _iv$[ebp]
	push	eax
	push	esi
	lea	eax, DWORD PTR _buf_out$[ebp]
	push	eax
	lea	eax, DWORD PTR _buf_in$[ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_des_cbc_dec
	add	esp, 20					; 00000014H
; Line 234
	cmp	DWORD PTR _last$[ebp], ebx
	je	SHORT $LN33@DES_file
	lea	ebx, DWORD PTR _buf_out$[ebp+esi-1]
	cmp	BYTE PTR [ebx], 8
	jae	SHORT $LN33@DES_file
; Line 235
	push	OFFSET ??_C@_08BFDNMHJA@?6undoing?$AA@
	call	_printf
; Line 237
	movzx	eax, BYTE PTR [ebx]
	pop	ecx
	sub	esi, eax
$LN33@DES_file:
; Line 240
	push	DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR _buf_out$[ebp]
	push	esi
	push	1
	push	eax
	call	_fwrite
	push	DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR _buf_in$[ebp]
	push	edi
	push	1
	push	eax
	call	_fread
	add	esp, 32					; 00000020H
	xor	ebx, ebx
$LN38@DES_file:
; Line 206
	mov	esi, eax
	cmp	esi, ebx
	jne	$LL15@DES_file
; Line 242
	push	DWORD PTR _out$[ebp]
	call	_fclose
	pop	ecx
	pop	edi
	pop	esi
; Line 243
	jmp	SHORT $LN2@DES_file
$LN16@DES_file:
; Line 244
	push	OFFSET ??_C@_07CLGEINJ@fopen?$CI?$CJ?$AA@
	call	_perror
	pop	ecx
$LN2@DES_file:
; Line 246
	push	DWORD PTR _in$[ebp]
	call	_fclose
; Line 247
	jmp	SHORT $LN39@DES_file
$LN17@DES_file:
; Line 248
	push	OFFSET ??_C@_07CLGEINJ@fopen?$CI?$CJ?$AA@
	call	_perror
$LN39@DES_file:
	pop	ecx
	pop	ebx
; Line 250
	leave
	ret	0
_DES_file ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@KLIHKBHM@?5?5?$FL?5?$CFc?$CFc?5requires?5parameter?6?$AA@ ; `string'
PUBLIC	_getparam
EXTRN	_exit:PROC
;	COMDAT ??_C@_0BN@KLIHKBHM@?5?5?$FL?5?$CFc?$CFc?5requires?5parameter?6?$AA@
CONST	SEGMENT
??_C@_0BN@KLIHKBHM@?5?5?$FL?5?$CFc?$CFc?5requires?5parameter?6?$AA@ DB ' '
	DB	' [ %c%c requires parameter', 0aH, 00H	; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _getparam
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_i$ = 16						; size = 4
_getparam PROC						; COMDAT
; Line 255
	mov	eax, DWORD PTR _argv$[esp-4]
	push	esi
	mov	esi, DWORD PTR _i$[esp]
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx]
	add	eax, 2
	cmp	BYTE PTR [eax], 0
; Line 256
	jne	SHORT $LN3@getparam
; Line 258
	lea	eax, DWORD PTR [edx+1]
	cmp	eax, DWORD PTR _argc$[esp]
	jge	SHORT $LN1@getparam
; Line 259
	mov	DWORD PTR [esi], eax
; Line 260
	mov	eax, DWORD PTR [ecx+4]
$LN3@getparam:
; Line 264
	pop	esi
	ret	0
$LN1@getparam:
; Line 262
	mov	ecx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [ecx+1]
	push	eax
	movsx	eax, BYTE PTR [ecx]
	push	eax
	push	OFFSET ??_C@_0BN@KLIHKBHM@?5?5?$FL?5?$CFc?$CFc?5requires?5parameter?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 263
	push	0
	call	_exit
$LN5@getparam:
	int	3
_getparam ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@FBFOFFDL@?6?5?5?9l?5?$DMpwd?$DO?5?5?5?5Create?5Lanman?5has@ ; `string'
PUBLIC	??_C@_0BJ@PDNMABCH@?6?5?5?9x?5?5?5?5?5?5?5?5?5?5Run?5tests?$AA@ ; `string'
PUBLIC	??_C@_0BH@OANEEOPF@?6?5?5?9d?5?5?5?5?5?5?5?5?5?5Decrypt?$AA@ ; `string'
PUBLIC	??_C@_0BH@PJJLJKMJ@?6?5?5?9e?5?5?5?5?5?5?5?5?5?5Encrypt?$AA@ ; `string'
PUBLIC	??_C@_0BL@GGPMPLLK@?6?5?5?9o?5?$DMfile?$DO?5?5?5Output?5file?$AA@ ; `string'
PUBLIC	??_C@_0BK@POKPNFPB@?6?5?5?9i?5?$DMfile?$DO?5?5?5Input?5file?$AA@ ; `string'
PUBLIC	??_C@_0BD@GBKBHDMF@?6?5?5?9k?5?$DMkey?$DO?5?5?5?5Key?$AA@ ; `string'
PUBLIC	??_C@_0DB@FIDMLMJG@?6?5?5usage?3?5DES_test?5?9k?5?$DMkey?$DO?5?9i?5?$DM@ ; `string'
PUBLIC	_usage
;	COMDAT ??_C@_0CD@FBFOFFDL@?6?5?5?9l?5?$DMpwd?$DO?5?5?5?5Create?5Lanman?5has@
CONST	SEGMENT
??_C@_0CD@FBFOFFDL@?6?5?5?9l?5?$DMpwd?$DO?5?5?5?5Create?5Lanman?5has@ DB 0aH
	DB	'  -l <pwd>    Create Lanman hash', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PDNMABCH@?6?5?5?9x?5?5?5?5?5?5?5?5?5?5Run?5tests?$AA@
CONST	SEGMENT
??_C@_0BJ@PDNMABCH@?6?5?5?9x?5?5?5?5?5?5?5?5?5?5Run?5tests?$AA@ DB 0aH, ' '
	DB	' -x          Run tests', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OANEEOPF@?6?5?5?9d?5?5?5?5?5?5?5?5?5?5Decrypt?$AA@
CONST	SEGMENT
??_C@_0BH@OANEEOPF@?6?5?5?9d?5?5?5?5?5?5?5?5?5?5Decrypt?$AA@ DB 0aH, '  -'
	DB	'd          Decrypt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PJJLJKMJ@?6?5?5?9e?5?5?5?5?5?5?5?5?5?5Encrypt?$AA@
CONST	SEGMENT
??_C@_0BH@PJJLJKMJ@?6?5?5?9e?5?5?5?5?5?5?5?5?5?5Encrypt?$AA@ DB 0aH, '  -'
	DB	'e          Encrypt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GGPMPLLK@?6?5?5?9o?5?$DMfile?$DO?5?5?5Output?5file?$AA@
CONST	SEGMENT
??_C@_0BL@GGPMPLLK@?6?5?5?9o?5?$DMfile?$DO?5?5?5Output?5file?$AA@ DB 0aH, ' '
	DB	' -o <file>   Output file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@POKPNFPB@?6?5?5?9i?5?$DMfile?$DO?5?5?5Input?5file?$AA@
CONST	SEGMENT
??_C@_0BK@POKPNFPB@?6?5?5?9i?5?$DMfile?$DO?5?5?5Input?5file?$AA@ DB 0aH, ' '
	DB	' -i <file>   Input file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBKBHDMF@?6?5?5?9k?5?$DMkey?$DO?5?5?5?5Key?$AA@
CONST	SEGMENT
??_C@_0BD@GBKBHDMF@?6?5?5?9k?5?$DMkey?$DO?5?5?5?5Key?$AA@ DB 0aH, '  -k <'
	DB	'key>    Key', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FIDMLMJG@?6?5?5usage?3?5DES_test?5?9k?5?$DMkey?$DO?5?9i?5?$DM@
CONST	SEGMENT
??_C@_0DB@FIDMLMJG@?6?5?5usage?3?5DES_test?5?9k?5?$DMkey?$DO?5?9i?5?$DM@ DB 0aH
	DB	'  usage: DES_test -k <key> -i <file> -o <file>', 0aH, 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _usage
_TEXT	SEGMENT
_usage	PROC						; COMDAT
; Line 270
	push	OFFSET ??_C@_0DB@FIDMLMJG@?6?5?5usage?3?5DES_test?5?9k?5?$DMkey?$DO?5?9i?5?$DM@
	call	_printf
; Line 271
	mov	DWORD PTR [esp], OFFSET ??_C@_0BD@GBKBHDMF@?6?5?5?9k?5?$DMkey?$DO?5?5?5?5Key?$AA@
	call	_printf
; Line 272
	mov	DWORD PTR [esp], OFFSET ??_C@_0BK@POKPNFPB@?6?5?5?9i?5?$DMfile?$DO?5?5?5Input?5file?$AA@
	call	_printf
; Line 273
	mov	DWORD PTR [esp], OFFSET ??_C@_0BL@GGPMPLLK@?6?5?5?9o?5?$DMfile?$DO?5?5?5Output?5file?$AA@
	call	_printf
; Line 274
	mov	DWORD PTR [esp], OFFSET ??_C@_0BH@PJJLJKMJ@?6?5?5?9e?5?5?5?5?5?5?5?5?5?5Encrypt?$AA@
	call	_printf
; Line 275
	mov	DWORD PTR [esp], OFFSET ??_C@_0BH@OANEEOPF@?6?5?5?9d?5?5?5?5?5?5?5?5?5?5Decrypt?$AA@
	call	_printf
; Line 276
	mov	DWORD PTR [esp], OFFSET ??_C@_0BJ@PDNMABCH@?6?5?5?9x?5?5?5?5?5?5?5?5?5?5Run?5tests?$AA@
	call	_printf
; Line 277
	mov	DWORD PTR [esp], OFFSET ??_C@_0CD@FBFOFFDL@?6?5?5?9l?5?$DMpwd?$DO?5?5?5?5Create?5Lanman?5has@
	call	_printf
	pop	ecx
; Line 278
	push	0
	call	_exit
$LN3@usage:
	int	3
_usage	ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DEEIID@0x?$CF02x?0?5?$AA@		; `string'
PUBLIC	??_C@_07JDFIIMLD@?6?5?5db?5?5?$AA@		; `string'
PUBLIC	??_C@_0BD@LBHFKKJD@?6?$CFs?3?6?5?5db?5?50x?$CF02x?0?$AA@ ; `string'
PUBLIC	_print_tbl
;	COMDAT ??_C@_08DEEIID@0x?$CF02x?0?5?$AA@
CONST	SEGMENT
??_C@_08DEEIID@0x?$CF02x?0?5?$AA@ DB '0x%02x, ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JDFIIMLD@?6?5?5db?5?5?$AA@
CONST	SEGMENT
??_C@_07JDFIIMLD@?6?5?5db?5?5?$AA@ DB 0aH, '  db  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LBHFKKJD@?6?$CFs?3?6?5?5db?5?50x?$CF02x?0?$AA@
CONST	SEGMENT
??_C@_0BD@LBHFKKJD@?6?$CFs?3?6?5?5db?5?50x?$CF02x?0?$AA@ DB 0aH, '%s:', 0aH
	DB	'  db  0x%02x,', 00H				; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _print_tbl
_TEXT	SEGMENT
_s$ = 8							; size = 4
_tbl$ = 12						; size = 4
_len$ = 16						; size = 4
_print_tbl PROC						; COMDAT
; Line 402
	push	ebx
	push	esi
; Line 406
	mov	esi, DWORD PTR _tbl$[esp+4]
; Line 407
	movzx	eax, BYTE PTR [esi+1]
	push	edi
	push	eax
	push	DWORD PTR _s$[esp+12]
	push	OFFSET ??_C@_0BD@LBHFKKJD@?6?$CFs?3?6?5?5db?5?50x?$CF02x?0?$AA@
	call	_printf
; Line 409
	mov	edi, DWORD PTR _len$[esp+20]
	add	esp, 12					; 0000000cH
	add	esi, 2
	xor	ebx, ebx
	add	edi, -2					; fffffffeH
	je	SHORT $LN2@print_tbl
$LL4@print_tbl:
; Line 410
	test	bl, 7
	jne	SHORT $LN1@print_tbl
	push	OFFSET ??_C@_07JDFIIMLD@?6?5?5db?5?5?$AA@
	call	_printf
	pop	ecx
$LN1@print_tbl:
; Line 411
	movzx	eax, BYTE PTR [esi]
	dec	eax
	push	eax
	push	OFFSET ??_C@_08DEEIID@0x?$CF02x?0?5?$AA@
	call	_printf
	inc	esi
	inc	ebx
	pop	ecx
	pop	ecx
	cmp	ebx, edi
	jb	SHORT $LL4@print_tbl
$LN2@print_tbl:
	pop	edi
	pop	esi
	pop	ebx
; Line 414
	ret	0
_print_tbl ENDP
_TEXT	ENDS
PUBLIC	??_C@_04JFFKLGJF@?$CF02X?$AA@			; `string'
PUBLIC	??_C@_0O@NHJKKPLE@?6MS?5Lanman?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BE@LEPKPCAH@?6?5?5?$FL?5self?9test?5OK?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@			; `string'
PUBLIC	_main
;	COMDAT ??_C@_04JFFKLGJF@?$CF02X?$AA@
CONST	SEGMENT
??_C@_04JFFKLGJF@?$CF02X?$AA@ DB '%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NHJKKPLE@?6MS?5Lanman?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0O@NHJKKPLE@?6MS?5Lanman?5?$DN?5?$AA@ DB 0aH, 'MS Lanman = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LEPKPCAH@?6?5?5?$FL?5self?9test?5OK?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BE@LEPKPCAH@?6?5?5?$FL?5self?9test?5OK?$CB?6?$AA@ DB 0aH, '  [ sel'
	DB	'f-test OK!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@
CONST	SEGMENT
??_C@_08NLHBPEGP@password?$AA@ DB 'password', 00H	; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_lm$ = -56						; size = 32
_test$ = -24						; size = 4
_in$ = -20						; size = 4
_out$ = -16						; size = 4
_pwd$ = -12						; size = 4
_crypt$ = -8						; size = 4
_i$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi
; Line 419
	xor	ecx, ecx
; Line 436
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _argc$[ebp]
	inc	ebx
	mov	DWORD PTR _test$[ebp], ecx
	mov	DWORD PTR _crypt$[ebp], ecx
	mov	DWORD PTR _in$[ebp], ecx
	mov	DWORD PTR _out$[ebp], ecx
	mov	DWORD PTR _pwd$[ebp], OFFSET ??_C@_08NLHBPEGP@password?$AA@
	mov	DWORD PTR _i$[ebp], ebx
	cmp	edi, ebx
	jle	$LN6@main
	mov	esi, DWORD PTR _argv$[ebp]
$LL23@main:
; Line 439
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	cmp	BYTE PTR [eax], 45			; 0000002dH
	je	SHORT $LN19@main
	cmp	BYTE PTR [eax+1], 47			; 0000002fH
	jne	SHORT $LN22@main
$LN19@main:
; Line 443
	movsx	eax, BYTE PTR [eax+1]
	sub	eax, 100				; 00000064H
	je	SHORT $LN15@main
	dec	eax
	je	SHORT $LN14@main
	sub	eax, 4
	je	SHORT $LN16@main
	dec	eax
	dec	eax
	je	SHORT $LN12@main
	dec	eax
	je	SHORT $LN10@main
	sub	eax, 3
	je	SHORT $LN13@main
	sub	eax, 9
	jne	SHORT $LN6@main
; Line 461
	mov	DWORD PTR _test$[ebp], ebx
; Line 462
	jmp	SHORT $LN22@main
$LN13@main:
; Line 455
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	esi
	push	edi
	call	_getparam
	mov	DWORD PTR _out$[ebp], eax
; Line 456
	jmp	SHORT $LN34@main
$LN12@main:
; Line 458
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	esi
	push	edi
	call	_getparam
	mov	DWORD PTR _pwd$[ebp], eax
; Line 459
	jmp	SHORT $LN34@main
$LN16@main:
; Line 446
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	esi
	push	edi
	call	_getparam
	mov	DWORD PTR _in$[ebp], eax
$LN34@main:
	add	esp, 12					; 0000000cH
; Line 447
	xor	ecx, ecx
	jmp	SHORT $LN22@main
$LN14@main:
; Line 452
	mov	DWORD PTR _crypt$[ebp], ecx
; Line 453
	jmp	SHORT $LN22@main
$LN15@main:
; Line 449
	mov	DWORD PTR _crypt$[ebp], ebx
$LN22@main:
; Line 436
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], edi
	jl	SHORT $LL23@main
; Line 479
	cmp	DWORD PTR _test$[ebp], ecx
	je	SHORT $LN5@main
; Line 480
	call	_run_tests
	test	eax, eax
	jne	SHORT $LN1@main
; Line 481
	push	OFFSET ??_C@_0BE@LEPKPCAH@?6?5?5?$FL?5self?9test?5OK?$CB?6?$AA@
	call	_printf
	pop	ecx
; Line 482
	jmp	SHORT $LN1@main
$LN6@main:
; Line 473
	call	_usage
$LN10@main:
; Line 464
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	esi
	push	edi
	call	_getparam
; Line 465
	push	eax
	lea	eax, DWORD PTR _lm$[ebp]
	push	eax
	call	_lanman
; Line 466
	push	OFFSET ??_C@_0O@NHJKKPLE@?6MS?5Lanman?5?$DN?5?$AA@
	call	_printf
	add	esp, 24					; 00000018H
; Line 467
	xor	esi, esi
$LL9@main:
; Line 468
	movzx	eax, BYTE PTR _lm$[ebp+esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	pop	ecx
	pop	ecx
	cmp	esi, 16					; 00000010H
	jl	SHORT $LL9@main
$LN1@main:
	pop	edi
	pop	esi
; Line 470
	xor	eax, eax
	pop	ebx
; Line 489
	leave
	ret	0
$LN5@main:
; Line 483
	cmp	DWORD PTR _in$[ebp], ecx
	je	SHORT $LN6@main
	cmp	DWORD PTR _out$[ebp], ecx
	je	SHORT $LN6@main
	cmp	DWORD PTR _pwd$[ebp], ecx
	je	SHORT $LN6@main
; Line 484
	push	DWORD PTR _crypt$[ebp]
	push	DWORD PTR _pwd$[ebp]
	push	DWORD PTR _out$[ebp]
	push	DWORD PTR _in$[ebp]
	call	_DES_file
	add	esp, 16					; 00000010H
; Line 488
	jmp	SHORT $LN1@main
$LN32@main:
_main	ENDP
_TEXT	ENDS
END
